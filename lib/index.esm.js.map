{"version":3,"file":"index.esm.js","sources":["../node_modules/get-random-values-esm/index.mjs","../node_modules/@sanity/util/lib/content.esm.js","../src/components/TableInput.tsx","../src/components/TablePreview.tsx","../src/index.ts"],"sourcesContent":["// Strict ESM env, designed to run outside Node.js in envs that provide WebCrypto (deno, browsers, etc)\n\nexport default function getRandomValues(typedArray) {\n  return window.crypto.getRandomValues(typedArray)\n}\n","import getRandomValues from 'get-random-values-esm';\nvar hasOwn = Object.prototype.hasOwnProperty.call.bind(Object.prototype.hasOwnProperty);\nfunction isDeepEmptyObject(value) {\n  for (const key in value) {\n    if (key === \"_type\" || key === \"_key\") {\n      continue;\n    }\n    if (hasOwn(value, key) && !isDeepEmpty(value[key])) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction isDeepEmptyArray(value) {\n  for (let i = 0; i < value.length; i++) {\n    if (!isDeepEmpty(value[i])) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction isDeepEmpty(value) {\n  if (value === void 0 || value === null) {\n    return true;\n  }\n  const type = typeof value;\n  if (Array.isArray(value)) {\n    return isDeepEmptyArray(value);\n  }\n  if (type === \"object\") {\n    return isDeepEmptyObject(value);\n  }\n  return false;\n}\nconst isEmptyArray = isDeepEmptyArray;\nconst isEmpty = isDeepEmpty;\nconst isEmptyObject = isDeepEmptyObject;\nfunction isShallowEmptyObject(value) {\n  for (const key in value) {\n    if (key === \"_type\" || key === \"_key\") {\n      continue;\n    }\n    if (hasOwn(value, key) && value[key] !== void 0) {\n      return false;\n    }\n  }\n  return true;\n}\nconst getByteHexTable = /* @__PURE__ */(() => {\n  let table;\n  return () => {\n    if (table) {\n      return table;\n    }\n    table = [];\n    for (let i = 0; i < 256; ++i) {\n      table[i] = (i + 256).toString(16).substring(1);\n    }\n    return table;\n  };\n})();\nfunction whatwgRNG() {\n  let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16;\n  const rnds8 = new Uint8Array(length);\n  getRandomValues(rnds8);\n  return rnds8;\n}\nfunction randomKey(length) {\n  const table = getByteHexTable();\n  return whatwgRNG(length).reduce((str, n) => str + table[n], \"\").slice(0, length);\n}\nconst toString = Object.prototype.toString;\nfunction resolveJSType(val) {\n  switch (toString.call(val)) {\n    case \"[object Function]\":\n      return \"function\";\n    case \"[object Date]\":\n      return \"date\";\n    case \"[object RegExp]\":\n      return \"regexp\";\n    case \"[object Arguments]\":\n      return \"arguments\";\n    case \"[object Array]\":\n      return \"array\";\n    case \"[object String]\":\n      return \"string\";\n  }\n  if (typeof val == \"object\" && val && typeof val.length == \"number\") {\n    try {\n      if (typeof val.callee == \"function\") {\n        return \"arguments\";\n      }\n    } catch (ex) {\n      if (ex instanceof TypeError) {\n        return \"arguments\";\n      }\n    }\n  }\n  if (val === null) {\n    return \"null\";\n  }\n  if (val === void 0) {\n    return \"undefined\";\n  }\n  if (val && val.nodeType === 1) {\n    return \"element\";\n  }\n  if (val === Object(val)) {\n    return \"object\";\n  }\n  return typeof val;\n}\nfunction resolveTypeName(value) {\n  const jsType = resolveJSType(value);\n  if (jsType !== \"object\") {\n    return jsType;\n  }\n  const obj = value;\n  return \"_type\" in obj && obj._type || jsType;\n}\nexport { isDeepEmpty, isEmpty, isEmptyArray, isEmptyObject, isShallowEmptyObject, randomKey, resolveTypeName };\n//# sourceMappingURL=content.esm.js.map\n","import React, {useCallback} from 'react'\nimport {\n  RenderInputCallback,\n  MemberField,\n  FieldMember,\n  ObjectInputProps,\n  BlockDefinition,\n} from 'sanity'\nimport {PortableTextBlock, set} from 'sanity'\nimport {Button, Inline, Stack, Card, Text} from '@sanity/ui'\nimport {randomKey} from '@sanity/util/content'\n\nimport {AddIcon, RemoveIcon} from '@sanity/icons'\n\nimport type {Cell, Row, Table, TableConfig} from '../types'\n\nfunction createTextBlock(text: string, cellSchema: BlockDefinition): PortableTextBlock {\n  return {\n    _key: randomKey(),\n    _type: cellSchema.name,\n    children: [\n      {\n        _key: randomKey(),\n        _type: 'span',\n        marks: [],\n        text: text,\n      },\n    ],\n    markDefs: [],\n    style: 'normal',\n  }\n}\n\nfunction createCell(text: string, cellSchema: BlockDefinition): Cell {\n  return {\n    _key: randomKey(),\n    _type: 'table-cell',\n    text: [createTextBlock(text, cellSchema)],\n  }\n}\n\nfunction createRow(cellCount: number, cellSchema: BlockDefinition): Row {\n  return {\n    _key: randomKey(),\n    _type: 'table-row',\n    cells: Array.from(Array(cellCount)).map((_, i) => createCell(`Cell ${i + 1}`, cellSchema)),\n  }\n}\n\nfunction popColumn(rows: Row[] = []): Row[] {\n  return rows.map((row) => {\n    const {cells, ...rest} = row\n\n    const newCells = [...cells]\n    newCells.pop()\n\n    return {\n      ...rest,\n      cells: newCells,\n    }\n  })\n}\n\nfunction appendColumn(rows: Row[] = [], cellSchema: BlockDefinition): Row[] {\n  return rows.map((row) => {\n    const {cells, ...rest} = row\n    return {\n      ...rest,\n      cells: [...cells, createCell(`Cell ${cells.length + 1}`, cellSchema)],\n    }\n  })\n}\n\nfunction locateMember(members: Array<FieldMember>, key: string) {\n  return members.find(\n    (member): member is FieldMember => member.kind === 'field' && member.name === key\n  )\n}\n\nexport function TableInput(props: ObjectInputProps & TableConfig) {\n  const {members, onChange, value, renderInput, cellSchema} = props\n\n  const rowsMember = locateMember(members as FieldMember[], 'rows')\n\n  const addColumn = useCallback(() => {\n    const num_cols = value?.num_cols + 1 || 1\n\n    const rows: Row[] = appendColumn(value?.rows, cellSchema)\n\n    onChange(set({...value, rows, num_cols}))\n  }, [onChange, value, cellSchema])\n\n  const removeColumn = useCallback(() => {\n    if (value?.num_cols === 1) return\n    const num_cols = value?.num_cols - 1 || 1\n\n    const rows: Row[] = popColumn(value?.rows)\n\n    onChange(set({...value, rows, num_cols}))\n  }, [onChange, value])\n\n  const rowsInput: RenderInputCallback = useCallback(\n    // TODO InputProps doesn't have onInsert on it for some reason?\n    (inputProps: any) => {\n      const handleInsert = () => {\n        const {rows, num_cols} = value as Table\n\n        return onChange(set({...value, rows: [...rows, createRow(num_cols, cellSchema)]}))\n      }\n\n      return renderInput({...inputProps, onInsert: handleInsert})\n    },\n    [value, onChange, cellSchema, renderInput]\n  )\n\n  return (\n    <Stack>\n      <Card padding={1} paddingBottom={4}>\n        <Inline space={2}>\n          <Button icon={RemoveIcon} mode=\"ghost\" onClick={removeColumn} />\n          <Text>\n            {value?.num_cols ?? 1} {value?.num_cols === 1 ? 'Column' : 'Columns'}\n          </Text>\n          <Button icon={AddIcon} tone=\"primary\" onClick={addColumn} />\n        </Inline>\n      </Card>\n\n      {rowsMember && (\n        <MemberField\n          member={rowsMember}\n          renderInput={rowsInput}\n          renderField={props.renderField}\n          renderItem={props.renderItem}\n          renderPreview={props.renderPreview}\n          renderBlock={props.renderBlock}\n          renderAnnotation={props.renderAnnotation}\n        />\n      )}\n    </Stack>\n  )\n}\n\nexport function createTableInput(cellSchema: BlockDefinition) {\n  return (props: ObjectInputProps) => <TableInput {...props} cellSchema={cellSchema} />\n}\n","import type {Table} from '../types'\nimport {Box, Inline, Stack, Card, Text} from '@sanity/ui'\nimport {toPlainText} from '@portabletext/toolkit'\n\nexport function TablePreview(props: Table) {\n  const {rows} = props\n\n  return (\n    <Stack>\n      <Card borderBottom padding={4}>\n        <Text size={4} weight=\"bold\">\n          Table\n        </Text>\n      </Card>\n      {rows.length === 0 ? (\n        <Card padding={4}>\n          <Text>EmptyTable</Text>\n        </Card>\n      ) : (\n        rows.map((row) => (\n          <Box key={row._key} padding={2}>\n            <Inline space={2}>\n              {row?.cells?.map((cell) => (\n                <Card key={cell._key} padding={4} tone=\"primary\">\n                  {toPlainText(cell.text ?? [])}\n                </Card>\n              ))}\n            </Inline>\n          </Box>\n        ))\n      )}\n    </Stack>\n  )\n}\n","import {toPlainText} from '@portabletext/toolkit'\nimport {definePlugin} from 'sanity'\n\nimport type {TableConfig, Cell} from './types'\nimport {createTableInput, TablePreview} from './components'\n\nexport * from './types'\n\nexport const portableTable = definePlugin<TableConfig>((schema) => {\n  const portableTextSchema = schema.cellSchema\n\n  const WrappedTableInput = createTableInput(portableTextSchema)\n\n  return {\n    name: 'portable-table',\n    schema: {\n      types: [\n        {\n          title: 'Table Cell Body',\n          name: 'table-cell-body',\n          type: 'array',\n          of: [portableTextSchema],\n        },\n        {\n          title: 'Table Cell',\n          name: 'table-cell',\n          type: 'object',\n          preview: {\n            select: {\n              text: 'text',\n            },\n            prepare({text}) {\n              return {title: toPlainText(text ?? [])}\n            },\n          },\n          fields: [\n            {\n              name: 'text',\n              type: 'table-cell-body',\n            },\n          ],\n        },\n        {\n          title: 'Table Row',\n          name: 'table-row',\n          type: 'object',\n          preview: {\n            select: {\n              cells: 'cells',\n            },\n            prepare({cells = []}: {cells: Cell[]}) {\n              return {title: cells.map((cell) => toPlainText(cell.text ?? [])).join(', ')}\n            },\n          },\n          fields: [\n            {\n              name: 'cells',\n              type: 'array',\n              of: [\n                {\n                  type: 'table-cell',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          name: schema.name ?? 'table',\n          title: schema.title ?? 'Table',\n          type: 'object',\n          components: {\n            preview: TablePreview,\n            input: WrappedTableInput,\n          },\n          preview: {\n            select: {\n              rows: 'rows',\n            },\n            prepare({rows = []}) {\n              return {rows}\n            },\n          },\n          fields: [\n            {\n              name: 'num_cols',\n              type: 'number',\n              validation: (Rule) => Rule.required().min(1),\n              initialValue: 3,\n            },\n            {\n              name: 'rows',\n              type: 'array',\n              // TODO add a validation for column count\n              of: [{type: 'table-row'}],\n              initialValue: [],\n            },\n          ],\n        },\n      ],\n    },\n  }\n})\n"],"names":["toPlainText","set","MemberField","definePlugin","jsx","jsxs","useCallback","Stack","Card","Inline","Button","Text","Box","RemoveIcon","AddIcon","Object","prototype","hasOwnProperty","call","bind","getByteHexTable","table","i","toString","substring","whatwgRNG","rnds8","Uint8Array","arguments","length","undefined","typedArray","window","crypto","getRandomValues","randomKey","reduce","str","n","slice","createTextBlock","text","cellSchema","_key","_type","name","children","marks","markDefs","style","createCell","createRow","cellCount","cells","Array","from","map","_","concat","TableInput","props","_a","members","onChange","value","renderInput","rowsMember","key","find","member","kind","locateMember","addColumn","num_cols","rows","row","rest","appendColumn","removeColumn","newCells","pop","popColumn","rowsInput","inputProps","onInsert","handleInsert","padding","paddingBottom","space","icon","mode","onClick","tone","renderField","renderItem","renderPreview","renderBlock","renderAnnotation","TablePreview","borderBottom","size","weight","cell","portableTable","schema","_b","portableTextSchema","WrappedTableInput","types","title","type","of","preview","select","prepare","_ref","fields","_ref2","join","components","input","_ref3","validation","Rule","required","min","initialValue"],"mappings":"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","x_google_ignoreList":[0,1]}